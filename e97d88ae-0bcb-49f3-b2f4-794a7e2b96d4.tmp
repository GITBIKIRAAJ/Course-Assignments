{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bd52d763",
   "metadata": {},
   "source": [
    "###  1.What are the two values of the Boolean data type? How do you write them?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3796ff9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x is a  <class 'bool'>\n",
      "y is a  <class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "#There are only 2 Boolean data types \n",
    "True and False\n",
    "#we can write them in this way\n",
    "x= True\n",
    "y= False\n",
    "print(\"x is a \",type(x))\n",
    "print(\"y is a \",type(y))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6135d154",
   "metadata": {},
   "source": [
    "### 2. What are the three different types of Boolean operators?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "72c8c875",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "#Boolean operator types- Logical(And,Or, Not) and Airthmetic operator(==,<,>,!=,<=,=>)\n",
    "#Example:\n",
    "a=10\n",
    "b=15\n",
    "print(a>5 and b<=15)\n",
    "print(a==15 or b<=15)\n",
    "print(not(b<16))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6fae3fd",
   "metadata": {},
   "source": [
    "### 3. Make a list of each Boolean operator's truth tables (i.e. every possible combination of Boolean values for the operator and what it evaluate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c0d63c35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#Here is the list of Boolean operator's truth table\n",
    "\n",
    "print(True and True)\n",
    "print(True or False)\n",
    "print(True or True)\n",
    "print(False or True)\n",
    "print(not False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efe77de4",
   "metadata": {},
   "source": [
    "### 4. What are the values of the following expressions ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b84b7bd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n",
      "False\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print((5>4)and(3==5)) \n",
    "print(not(5>4)) \n",
    "print((5>4)or(3==5)) \n",
    "print(not((5>4)or(3==5))) \n",
    "print((True and True)and(True==False)) \n",
    "print((not False)or(not True)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e56f87a1",
   "metadata": {},
   "source": [
    "### 5. What are the six comparison operators?\n",
    "\n",
    "**Ans**: There are Six Comparision Operators available;<br>\n",
    "(== , != , < , > , <= , =>)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c81002",
   "metadata": {},
   "source": [
    "### 6. How do you tell the difference between the equal to and assignment operators? Describe a condition and when you would use one?\n",
    "**Answer**- Equal sign used as assignment operator where double equal sign used as a equal, mean the varibale equal to the value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "195f1405",
   "metadata": {},
   "source": [
    "#example <br>\n",
    "x=10 -> Assignment operator (x value ranges from (0 to 10)) <br>\n",
    "x==10 -> Here x is exat equal to 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "90e088f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range(0, 10)\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "x=10\n",
    "x==10\n",
    "print(range(x))\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afd859a7",
   "metadata": {},
   "source": [
    "### 7. Identify the three blocks in this code:\n",
    "spam = 0\n",
    "if spam == 10:\n",
    "print('eggs') <br>\n",
    "if spam > 5:\n",
    "print('bacon')\n",
    "else:\n",
    "print('ham')\n",
    "print('spam')\n",
    "print('spam')\n",
    "\n",
    "**Ans** The 3 blocks in this code <br>\n",
    "ham <br>\n",
    "spam <br>\n",
    "spam"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bf3ec6c",
   "metadata": {},
   "source": [
    "### 8. Write code that prints Hello if 1 is stored in spam, prints Howdy if 2 is stored in spam, and prints Greetings! if anything else is stored in spam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f55f904e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n",
      "Howdy\n",
      "Greetings\n",
      "Greetings\n"
     ]
    }
   ],
   "source": [
    "def spamtest(spam):\n",
    "    if spam==1:\n",
    "        print(\"Hello\")\n",
    "    elif spam==2:\n",
    "        print(\"Howdy\")\n",
    "    else:\n",
    "        print(\"Greetings\")\n",
    "spamtest(1)\n",
    "spamtest(2)\n",
    "spamtest(4)\n",
    "spamtest(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5901fe63",
   "metadata": {},
   "source": [
    "### 9. If your programme is stuck in an endless loop, what keys youâ€™ll press?\n",
    "**Ans** -> Press CTRL-C to stop a program stuck in an infinite loop"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58e5d065",
   "metadata": {},
   "source": [
    "### 10. How can you tell the difference between break and continue?\n",
    "Expalined here with the help of example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ec505836",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 2 3 4 5 \n",
      " for continue given below\n",
      "0 1 2 3 4 5 7 8 9 "
     ]
    }
   ],
   "source": [
    "n=10\n",
    "for i in range(n):\n",
    "    if i==6:\n",
    "        break\n",
    "    print(i, end=\" \") \n",
    "print(\"\\n\",\"for continue given below\")\n",
    "n=10\n",
    "for i in range(n):\n",
    "    if i==6:\n",
    "        continue\n",
    "    print(i, end=\" \")  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78a62f9b",
   "metadata": {},
   "source": [
    "### 11.  In a for loop, what is the difference between range(10), range(0, 10), and range(0, 10, 1)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "06f73517",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "range(0, 10)\n",
      "range(0, 10)\n",
      "range(0, 10)\n"
     ]
    }
   ],
   "source": [
    "# range(10) -> Rnage from 0 to 9\n",
    "#range(0,10), -> Range from lower bound 0 to upper bound 9 excluding 10\n",
    "#range(0,10,1) -> Same as above but here it will jump by 1 in each loop\n",
    "\n",
    "#out of the the 3 range will be same\n",
    "#example-\n",
    "a,b,c=10,10,10\n",
    "print(range(a))\n",
    "print(range(0,b))\n",
    "print(range(0,c,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "49812bc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n"
     ]
    }
   ],
   "source": [
    "n=10\n",
    "sum=0\n",
    "for i in range(n):\n",
    "    sum=sum+i \n",
    "print(sum)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfee517c",
   "metadata": {},
   "source": [
    "### 12. Write a short program that prints the numbers 1 to 10 using a for loop. Then write an equivalent program that prints the numbers 1 to 10 using a while loop ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1739418e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----- Using For Loop -----\n",
      "1 2 3 4 5 6 7 8 9 10 \n",
      "\n",
      "----- Using While Loop -----\n",
      "1 2 3 4 5 6 7 8 9 10 "
     ]
    }
   ],
   "source": [
    "print('-'*5,'Using For Loop','-'*5)\n",
    "for i in range(1,11):\n",
    "    print(i, end=\" \")\n",
    "print('\\n')\n",
    "print('-'*5,'Using While Loop','-'*5) \n",
    "i=1\n",
    "while i<=10:\n",
    "    print(i, end=\" \")\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "928956bb",
   "metadata": {},
   "source": [
    "### 13. If you had a function named bacon() inside a module named spam, how would you call it after importing spam?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd5c66ad",
   "metadata": {},
   "source": [
    "This functionwill be <br>\n",
    "import spam <br>\n",
    "spam.bacon()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73c2c3f4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
